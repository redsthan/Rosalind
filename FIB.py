from functools import lru_cache

@lru_cache
def fibonacci(n, k=1):
    """
    Calculate the nth term in the Fibonacci sequence where each couple generates 'k' new couples.

    Parameters:
    - n (int): The index of the Fibonacci sequence (1-based).
    - k (int, optional): The number of couples generated by each existing couple. Default is 1.

    Returns:
    int: The nth Fibonacci number considering the specified number of couples generated.

    Note:
    The Fibonacci sequence starts with 1, 1, 2, 3, 5, 8, ...
    The formula used is: F(n) = F(n-1) + k * F(n-2), with F(1) = F(2) = 1.
    'k' represents the number of couples generated by each existing couple in the sequence.
    """
    if n in (1, 2):
        return 1
    return fibonacci(n - 1, k) + k * fibonacci(n - 2, k)


n, k = map(int, input().split())
print(fibonacci(n, k))
